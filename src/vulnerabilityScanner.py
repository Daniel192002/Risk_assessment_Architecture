from gvm.connections import UnixSocketConnection
from gvm.protocols.gmp import Gmp
from gvm.transforms import EtreeCheckCommandTransform
from lxml import etree
import databaseManager
import time

class VulnerabilityScanner:
    def __init__(self):
        # Usamos conexión por socket UNIX
        self.connection = UnixSocketConnection(path='/run/gvmd/gvmd.sock')
        self.transform = EtreeCheckCommandTransform()
    
    def scan_devices_from_db(self):
        with Gmp(connection=self.connection, transform=self.transform) as gmp:
            gmp.authenticate('admin', 'c5dcf636-a85d-4895-8430-dae5413b1c84')
            print("[+] Autenticación exitosa con GVM.")

            db = databaseManager.DatabaseManager(user="root", password="tfg2025", host="127.0.0.1")
            devices = db.get_devices()

            for mac, ipv4, ipv6 in devices:
                if ipv4 and mac:
                    print(f"[+] Escaneando {ipv4} ({mac})...")
                    self.scan_ip(gmp, ipv4)

            db.close()
    
    def scan_ip(self, gmp, ip):
        target_name = f"Scan-{ip}"
        task_name = f"Task-{ip}"
        
        # 1. Verificar si el target existe
        target_id = None
        existing_targets = gmp.get_targets()
        for target in existing_targets.xpath("target"):
            name = target.find("name").text
            if name == target_name:
                target_id = target.get("id")
                print(f"[DEBUG] Objetivo existente: {target_name} (ID: {target_id})")
                break
        if not target_id:
            # Crear lista de puertos personalizada si no existe ya
            port_list_name = "Puertos comunes"
            port_list_id = None
            port_lists = gmp.get_port_lists()
            for port_list in port_lists.xpath("port_list"):
                name = port_list.findtext("name")
                if name == port_list_name:
                    port_list_id = port_list.get("id")
                    break
            if not port_list_id:
                port_range = "21,22,23,25,53,80,110,143,443,3306,3389"
                new_port_list = gmp.create_port_list(
                    name = port_list_name,
                    comment = "Lista personalizada de puertos TCP/UDP comunes",
                    port_range = port_range,
                    port_range_type = "tcp"
                )
                port_list_id = new_port_list.get("id")
                print(f"[+] Lista de puertos creada (ID: {port_list_id})")
            else:
                 print(f"[+] Usando lista de puertos existente: {port_list_name} (ID: {port_list_id})")
            
            target_response = gmp.create_target(
                name = target_name,
                hosts = [ip],
                port_list_id = port_list_id
            )
            target_id = target_response.get("id")
            print(f"[DEBUG] Objetivo creado: {target_name} (ID: {target_id})")
        #2. Obtener el config ID
        config_id = None
        configs = gmp.get_scan_configs()
        # print(f"[DEBUG] XML bruto de scan_configs:")
        # print(etree.tostring(configs, pretty_print=True).decode())
        for config in configs.xpath(".//config"):
            name = config.find("name").text
            print(f"[DEBUG] Config Name: {name} | ID: {config.get('id')}")
            if "Full and fast" in name:
                config_id = config.get("id")
                break
        if not config_id:
            raise RuntimeError("No se encontró la configuración de escaneo 'Full and fast'.")
        
        #3. Obtener scanner ID
        scanner_id = None
        scanners = gmp.get_scanners()
        for scanner in scanners.xpath("scanner"):
            name = scanner.find("name").text
            if "OpenVAS Default" in name:
                scanner_id = scanner.get("id")
                print(f"[DEBUG] Scanner Name: {name} | ID: {scanner_id}")
                break
        if not scanner_id:
            raise RuntimeError("No se encontró un escáner válido ('OpenVAS Default').")
        
        # 4.Verificar si la tarea ya existe y su estado
        task_id = None
        existing_tasks = gmp.get_tasks()
        for task in existing_tasks.xpath("task"):
            name = task.find("name").text
            if name == task_name:
                task_id = task.get("id")
                status_elem = task.find("status")
                task_status = status_elem.text if status_elem is not None else "Unknown"
                print(f"[DEBUG] Tarea existente: {task_name} (ID: {task_id}) | Estado: {task_status}")
                break
        if task_id and task_status not in ("Done", "Stopped", "Interrupted"):
            print(f"[!] La tarea '{task_name}' ya está en ejecución (estado: {task_status}). Saltando escaneo.")
            return
        if not task_id:
            response = gmp.create_task(task_name, config_id, target_id, scanner_id )
            task_id = response.get('id')
            print(f"[DEBUG] Tarea creada: {task_name} (ID: {task_id})")
        
        #5. Iniciar la tarea 
        gmp.start_task(task_id)
        print(f"[✓] Escaneo iniciado para {ip} (task ID: {task_id})")
        print("[...] Esperando a que termine la tarea...")
        
        #6. Esperar hasta que termine
        while True:
            task_info = gmp.get_task(task_id=task_id)
            # print(f"[DEBUG] XML bruto de task_info:")
            # print(etree.tostring(task_info, pretty_print=True).decode())
            
            task = task_info.find("task")
            status = None
            
            if task is not None:
                status_elem = task.find("status")
                if status_elem is not None:
                    status = status_elem.text
                else:
                    print("[ERROR] No se pudo obtener el estado de la tarea.")
                    break
            else:
                print("[ERROR] No se encontró el nodo <task> en la respuesta.")
                break
            
            print(f"[DEBUG] Estado actual: {status}")
            if status in ("Done", "Stopped"):
                print("[✓] Escaneo finalizado.")
                break
            elif status == "Interrupted":
                print("[!] Escaneo interrumpido.")
                break
            time.sleep(10)
        # 7. Obtener resultados
        last_report_elem = task_info.find(".//last_report/report")
        if last_report_elem is None:
            print("[!] No se encontró el último reporte.")
            return
        
        report_id = last_report_elem.get("id")
        print(f"[DEBUG] Reporte ID: {report_id}")
        
        report = gmp.get_report(report_id=report_id, details=True)
        print(f"[DEBUG] XML bruto de report_info:")
        print(etree.tostring(report, pretty_print=True).decode())
        
        print(f"[+] Resultados del escaneo para {ip}:")
        for result in report.xpath(".//result"):
            name = result.findtext("name")
            severity = result.findtext("severity")
            host = result.findtext("host")
            port = result.findtext("port")
            print(f" - Host: {host}, Puerto: {port}, Vulnerabilidad: {name}, Severidad: {severity}")
        