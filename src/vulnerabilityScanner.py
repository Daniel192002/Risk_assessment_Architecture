from gvm.connections import UnixSocketConnection
from gvm.protocols.gmp import Gmp
from gvm.transforms import EtreeCheckCommandTransform
import databaseManager

class VulnerabilityScanner:
    def __init__(self):
        # Usamos conexión por socket UNIX
        self.connection = UnixSocketConnection(path='/run/gvmd/gvmd.sock')
        self.transform = EtreeCheckCommandTransform()
    
    def scan_devices_from_db(self):
        with Gmp(connection=self.connection, transform=self.transform) as gmp:
            gmp.authenticate('admin', 'de83cb30-30af-4ec9-a5f3-de45eca0d940')
            print("[+] Autenticación exitosa con GVM.")

            db = databaseManager.DatabaseManager(user="root", password="tfg2025", host="127.0.0.1")
            devices = db.get_devices()

            for mac, ipv4, ipv6 in devices:
                if ipv4 and mac:
                    print(f"[+] Escaneando {ipv4} ({mac})...")
                    self.scan_ip(gmp, ipv4)

            db.close()
    
    def scan_ip(self, gmp, ip):
        target_name = f"Scan-{ip}"
        task_name = f"Task-{ip}"
        
        target_id = None
        existing_targets = gmp.get_targets()
        for target in existing_targets.xpath("target"):
            name = target.find("name").text
            if name == target_name:
                target_id = target.get("id")
                print(f"[DEBUG] Objetivo existente: {target_name} (ID: {target_id})")
                break
        if not target_id:
            port_list_id = gmp.get_port_lists().xpath("port_list[name='All IANA assigned TCP and UDP']/@id")[0]
            target_id = gmp.create_target(
                name = target_name,
                hosts = [ip],
                port_list_id = port_list_id
            )
            print(f"[DEBUG] Objetivo creado: {target_name} (ID: {target_id})")
        
        config_id = None
        configs = gmp.get_scan_configs()
        print(f"[DEBUG] XML bruto de scan_configs:\n{configs}")
        for config in configs.xpath("scan_config"):
            name = config.find("name").text
            print(f"[DEBUG] Config Name: {name} | ID: {config.get('id')}")
            if "Full and fast" in name:
                config_id = config.get("id")
                break
        if not config_id:
            raise RuntimeError("No se encontró la configuración de escaneo 'Full and fast'.")
        
        task_id = None
        existing_tasks = gmp.get_tasks()
        for task in existing_tasks.xpath("task"):
            name = task.find("name").text
            if name == task_name:
                task_id = task.get("id")
                print(f"[DEBUG] Tarea existente: {task_name} (ID: {task_id})")
                break
        if not task_id:
            task_id = gmp.create_task(name=task_name, config_id=config_id, target_id=target_id)
            print(f"[DEBUG] Tarea creada: {task_name} (ID: {task_id})")
        
        gmp.start_task(task_id)
        print(f"[✓] Escaneo iniciado para {ip} (task ID: {task_id})")